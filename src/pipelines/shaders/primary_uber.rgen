#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : require

#include "shader_common.h"
#include "rt_common.h"

layout (push_constant, scalar) uniform PushConstant {
    RTRenderPushConstant render_const;
};

layout (set = 0, binding = 0) readonly buffer ViewInfos {
    ViewInfo view_info[];
};

#ifdef OUTPUT_COLOR
layout (set = 0, binding = RGEN_COLOR_BIND, rgba8) uniform image2D colorImage;
#endif

#ifdef OUTPUT_DEPTH
layout (set = 0, binding = RGEN_DEPTH_BIND, r32f) uniform image2D depthImage;
#endif

layout (set = 2, binding = 0) uniform accelerationStructureEXT tlas;

layout (location = 0) rayPayloadEXT RTPayload payload;

void main()
{
    // FIXME, don't use view / projection matrices here
    mat4 view_inv = inverse(view_info[render_const.batchIdx].view);
    mat4 proj_inv = inverse(view_info[render_const.batchIdx].projection);

    vec3 o = (view_inv * vec4(0, 0, 0, 1)).xyz;
    vec3 d = computeRayDir(gl_LaunchIDEXT.xy, view_inv, proj_inv);

	float tmin = 0.00001f;
	float tmax = 10000.f;

    traceRayEXT(tlas, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, o,
                tmin, d, tmax, 0);

#ifdef OUTPUT_COLOR
	imageStore(colorImage, ivec2(gl_LaunchIDEXT.xy) + ivec2(render_const.xOffset,
                                                            render_const.yOffset),
               vec4(payload.color, 1.f));
#endif

#ifdef OUTPUT_DEPTH
	imageStore(depthImage, ivec2(gl_LaunchIDEXT.xy) + ivec2(render_const.xOffset,
                                                            render_const.yOffset),
               vec4(payload.depth, 0.f, 0.f, 0.f));
#endif
}
